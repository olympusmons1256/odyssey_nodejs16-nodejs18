import { BaseFirestoreRepository } from "fireorm";
import { SpaceTemplate } from "../spaceTemplates/spaceTemplate.entity";
import { CreateSpaceDto } from "./dto/createSpace.dto";
import { CreateRuntimeModelDto } from "./dto/createRuntimeModel.dto";
import { CreateSpatialMediaDto } from "./dto/createSpatialMedia.dto";
import { UpdateSpaceDto } from "./dto/updateSpace.dto";
import { SpaceItem } from "./item.entity";
import { Organization } from "./organization.entity";
import { Space } from "./space.entity";
import { UpdateRuntimeModelDto } from "./dto/updateRuntimeModel.dto";
import { UpdateSpatialMediaDto } from "./dto/updateSpatialMedia.dto";
import { CreateUserDto } from "../users/dto/createUser.dto";
import { OrganizationUser } from "./organizationUser.entity";
import { UpdateUserDto } from "../users/dto/updateUser.dto";
import { InviteUsersToOrganizationDto, InviteUsersResultDto, InviteUsersToSpaceDto } from "./dto/invite.dto";
import { BillingPublic, BillingSubscription, BillingUsage } from "./billing.entity";
export declare class OrganizationsService {
    private organizations;
    constructor(organizations: BaseFirestoreRepository<Organization>);
    getOrganization(organizationId: string): Promise<Organization | undefined>;
    getBillingUsage(organizationId: string): Promise<BillingUsage | undefined>;
    getBillingPublic(organizationId: string): Promise<BillingPublic | undefined>;
    getBillingSubscription(organizationId: string): Promise<BillingSubscription | undefined>;
    getSpaces(organizationId: string): Promise<Space[]>;
    getSpace(organizationId: string, spaceId: string): Promise<Space | undefined>;
    getOrganizationUser(organizationId: string, organizationUserId: string): Promise<OrganizationUser | undefined>;
    getOrganizationUsers(organizationId: string): Promise<OrganizationUser[]>;
    createOrganizationUser(organizationId: string, createUserDto: CreateUserDto, userId: string): Promise<OrganizationUser | undefined | "error">;
    inviteOrganizationUsers(organizationId: string, inviteUsersDto: InviteUsersToOrganizationDto): Promise<InviteUsersResultDto | undefined>;
    inviteSpaceUsers(organizationId: string, spaceId: string, inviteUsersDto: InviteUsersToSpaceDto): Promise<InviteUsersResultDto | undefined>;
    updateOrganizationUser(organizationId: string, userId: string, updateUserDto: UpdateUserDto): Promise<OrganizationUser | undefined | "error">;
    deleteOrganizationUser(organizationId: string, userId: string): Promise<string | "error" | undefined>;
    createSpace(organizationId: string, createSpaceDto: CreateSpaceDto, spaceTemplate: SpaceTemplate): Promise<Space | undefined | "error">;
    updateSpace(organizationId: string, spaceId: string, updateSpaceDto: UpdateSpaceDto): Promise<Space | undefined | "error">;
    deleteSpace(organizationId: string, spaceId: string): Promise<string | "error" | undefined>;
    getSpaceItems(organizationId: string, spaceId: string): Promise<SpaceItem[]>;
    getSpaceItem(organizationId: string, spaceId: string, itemId: string): Promise<SpaceItem | undefined>;
    deleteSpaceItem(organizationId: string, spaceId: string, itemId: string): Promise<string | "error" | undefined>;
    createRuntimeModel(organizationId: string, spaceId: string, createRuntimeModelDto: CreateRuntimeModelDto): Promise<SpaceItem | undefined | "error">;
    createSpatialMedia(organizationId: string, spaceId: string, createSpatialMediaDto: CreateSpatialMediaDto): Promise<SpaceItem | undefined | "error">;
    updateRuntimeModel(organizationId: string, spaceId: string, runtimeModelId: string, updateRuntimeModelDto: UpdateRuntimeModelDto): Promise<SpaceItem | undefined | "error">;
    updateSpatialMedia(organizationId: string, spaceId: string, spatialMediaId: string, updateSpatialMediaDto: UpdateSpatialMediaDto): Promise<SpaceItem | undefined | "error">;
}
